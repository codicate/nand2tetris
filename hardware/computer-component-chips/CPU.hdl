// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // chips
	ARegister(in= inA, load= loadA, out= outA, out[0..14]=addressM);
	DRegister(in= outALU, load= loadD, out= outD);
    PC(in=outA, load=jump, inc=true, reset=reset , out[0..14]=pc );
    ALU(
        x= outD,
        y= y, 
        zx=instruction[11],
        nx=instruction[10], 
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outALU,out=outM, 
        zr=zr, 
        ng=ng
    );

    // A register: load if it's A instruction or dest is A=something
    Not(in=instruction[15],out=instructionA);
    Or(a=instructionA,b=instruction[5],out=loadA);
    // A register: load from instruction (A instruction) or ALU output
    Mux16(a=outALU, b[15]=false,b[0..14]=instruction[0..14], sel=instructionA, out=inA );
    
    // comp: choose A or M, ex. D+A or D+M
    Mux16(a=outA , b=inM , sel=instruction[12] , out=y );

    // dest = M
    And(a=instruction[15],b=instruction[3],out=writeM);
    // dest = D
    And(a=instruction[15],b=instruction[4],out=loadD);

    // jump instrucitons
    Not(in=ng, out=pos);
    Not(in=zr, out=nzr);
    And(a=pos, b=nzr, out=posnzr);
    And(a=instruction[0], b=posnzr, out=j1);
    And(a=instruction[1], b=zr, out=j2);
    And(a=instruction[2], b=ng, out=j3);

    Or(a=j1, b=j2, out=j12);
    Or(a=j3, b=j12, out=jump1);
    And(a=jump1,b=instruction[15],out=jump);
}